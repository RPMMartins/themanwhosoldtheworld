### http packages ###

from django.shortcuts import render
from django.http import HttpResponse
from django.urls import reverse
from django.http import HttpResponseRedirect
from django import forms


###  numerical packages   ###
from .utils import get_plot
import numpy as np, pandas as pd
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import matplotlib.pyplot as plt
import yfinance as yf
import datetime
import pmdarima as pm
import re


###  Form to introduce stock and time information ###
class StockForm(forms.Form):
       newstock = forms.CharField(label="Select Stock")


# Create your views here.

stock="test"

def index(request):
    global stock

    if request.method == "GET":
        return render(request, "ARIMA/index.html",{
                "stock": stock,
                "form": StockForm()
        })

    else:

        # Take in the data the user submitted and save it as for
        form = StockForm(request.POST)

        # Check if form data is valid (server-side)
        if form.is_valid():

            # Isolate the stock from the 'cleaned' version of form data
                stock = form.cleaned_data["newstock"]

                start = datetime.datetime(2018, 2, 1)
                end =   datetime.datetime(2020, 10, 11)

                df = yf.download(stock, start=start, end=end, interval="5d")

                series=df['Adj Close']

                series=series.interpolate()                chart = get_plot(series)

                series=np.log(series)


    return render(request, "ARIMA/index.html", {
            "stock": stock,
            "form": StockForm(),
            "chart": chart
    })



